{"version":3,"sources":["../src/write.js"],"names":["fs","require","Write","data","Promise","resolve","reject","readdir","err","dirs","console","log","forEach","dir","index","indexOf","packageJsonFile","existsSync","readFileSync","json","JSON","parse","comma","length","name","version","then","write","content","organizeFile","writeFile","module","exports"],"mappings":";;;;;;AAAA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;;IAEMC,K;AAEJ,mBAAe;AAAA;;AACb,SAAKC,IAAL,GAAY,EAAZ;AACD;;;;4BAEQ;AAAA;;AACP,UAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/BN,WAAGO,OAAH,CAAW,gBAAX,EAA6B,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC1C,cAAID,GAAJ,EAAS;AACPE,oBAAQC,GAAR,CAAYH,GAAZ;AACA;AACD;AACDC,eAAKG,OAAL,CAAa,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC3B,gBAAID,IAAIE,OAAJ,CAAY,GAAZ,MAAqB,CAAzB,EAA4B;AAC1B,kBAAIC,kBAAkB,oBAAoBH,GAApB,GAA0B,eAAhD;AACA,kBAAIb,GAAGiB,UAAH,CAAcD,eAAd,CAAJ,EAAoC;AAClC,oBAAIb,OAAOH,GAAGkB,YAAH,CAAgBF,eAAhB,CAAX;AACA,oBAAIR,GAAJ,EAAS;AACPE,0BAAQC,GAAR,CAAYH,GAAZ;AACD,iBAFD,MAEO;AACL,sBAAIW,OAAOC,KAAKC,KAAL,CAAWlB,IAAX,CAAX;AACA,sBAAImB,QAAQR,QAAQL,KAAKc,MAAL,GAAc,CAAtB,GAA0B,MAA1B,GAAmC,IAA/C;AACA,wBAAKpB,IAAL,GAAY,MAAKA,IAAL,cAAoBgB,KAAKK,IAAzB,WAAmCL,KAAKM,OAAxC,GAAkDH,KAAlD,CAAZ;AACD;AACF;AACF;AACF,WAdD;AAeAjB;AACD,SArBD;AAsBD,OAvBD,EAuBGqB,IAvBH,CAuBQ,YAAM;AACZ,cAAKC,KAAL;AACD,OAzBD;AA0BD;;;iCAEaxB,I,EAAM;AAClB,wDAGFA,IAHE;AAKD;;;4BAEQ;AACP,UAAIyB,UAAU,KAAKC,YAAL,CAAkB,KAAK1B,IAAvB,CAAd;AACAH,SAAG8B,SAAH,CAAa,kBAAb,EAAiCF,OAAjC,EAA0C,UAACpB,GAAD,EAAS;AACjD,YAAIA,GAAJ,EAAS;AACP,iBAAOE,QAAQC,GAAR,CAAYH,GAAZ,CAAP;AACD;;AAEDE,gBAAQC,GAAR,CAAY,qBAAZ;AACD,OAND;AAOD;;;;;;AAGHoB,OAAOC,OAAP,GAAiB9B,KAAjB","file":"write.js","sourcesContent":["let fs = require('fs')\n\nclass Write {\n\n  constructor () {\n    this.data = ''\n  }\n\n  start () {\n    new Promise((resolve, reject) => {\n      fs.readdir('./node_modules', (err, dirs) => {\n        if (err) {\n          console.log(err)\n          return\n        }\n        dirs.forEach((dir, index) => {\n          if (dir.indexOf('.') !== 0) {\n            let packageJsonFile = './node_modules/' + dir + '/package.json'\n            if (fs.existsSync(packageJsonFile)) {\n              let data = fs.readFileSync(packageJsonFile)\n              if (err) {\n                console.log(err)\n              } else {\n                let json = JSON.parse(data)\n                let comma = index < dirs.length - 1 ? ', \\n' : '\\n'\n                this.data = this.data + `    \"${json.name}\": ${json.version}${comma}`\n              }\n            }\n          }\n        })\n        resolve()\n      })\n    }).then(() => {\n      this.write()\n    })\n  }\n\n  organizeFile (data) {\n    return `{\n  \"name\": \"\",\n  \"dependencies\":{\n${data}  }\n}`\n  }\n\n  write () {\n    let content = this.organizeFile(this.data)\n    fs.writeFile('package.smp.json', content, (err) => {\n      if (err) {\n        return console.log(err)\n      }\n\n      console.log('The file was saved!')\n    })\n  }\n}\n\nmodule.exports = Write\n"]}