{"version":3,"sources":["../src/packager.js"],"names":["fs","require","_","getDependencies","dirs","deps","map","dir","index","indexOf","packageJsonFile","existsSync","data","readFileSync","json","JSON","parse","Object","keys","dependencies","concat","apply","getPackages","name","without","undefined","packager","finalData","Promise","resolve","reject","readdir","err","console","log","packages","forEach","comma","length","version","module","exports"],"mappings":"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","file":"packager.js","sourcesContent":["let fs = require('fs'),\n    _ = require('lodash')\n\nconst getDependencies = (dirs) => {\n  const deps = dirs.map((dir, index) => {\n    if (dir.indexOf('.') !== 0) {\n      let packageJsonFile = './node_modules/' + dir + '/package.json'\n      if (fs.existsSync(packageJsonFile)) {\n        let data = fs.readFileSync(packageJsonFile)\n        let json = JSON.parse(data)\n        return Object.keys(json.dependencies)\n      }\n    }\n  })\n  return [].concat.apply([], deps)\n}\n\nconst getPackages = (dependencies, dirs) => {\n  const deps = dirs.map((dir, index) => {\n    if (dir.indexOf('.') !== 0) {\n      let packageJsonFile = './node_modules/' + dir + '/package.json'\n      if (fs.existsSync(packageJsonFile)) {\n        let data = fs.readFileSync(packageJsonFile)\n        let json = JSON.parse(data)\n        if (dependencies.indexOf(json.name) < 0) {\n          return json.name\n        }\n      }\n    }\n  })\n  return _.without(deps, undefined)\n}\n\nconst packager  = () => {\n  let finalData = ''\n  return new Promise((resolve, reject) => {\n    fs.readdir('./node_modules', (err, dirs) => {\n      if (err) {\n        console.log(err)\n        return\n      }\n      const dependencies = getDependencies(dirs)\n      const packages = getPackages(dependencies, dirs)\n      packages.forEach((dir, index) => {\n        if (dir.indexOf('.') !== 0) {\n          let packageJsonFile = './node_modules/' + dir + '/package.json'\n          if (fs.existsSync(packageJsonFile)) {\n            let data = fs.readFileSync(packageJsonFile)\n            if (err) {\n              console.log(err)\n            } else {\n              let json = JSON.parse(data)\n              let comma = index < packages.length - 1 ? '\", \\n' : '\"\\n'\n              finalData = finalData + `    \"${json.name}\": \"${json.version}${comma}`\n            }\n          }\n        }\n      })\n      resolve(finalData)\n    })\n  })\n}\n\nmodule.exports = packager\n"]}